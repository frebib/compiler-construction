/% TEST %/

function operator() {
  x + 1;
  z - 3;
  4 * false;
  infinity(0 % 0) / 0;
  if (6 > 4) {
    i = 4 <= 3;
  } else if (n++) {
    the = --(square >= root);
  } else {
    ++((16)--) == (true || !false);
  }
  return 3 && chickens;
}

/% OUTPUT %/

[
  ("operator", [], 
    Seq (
      BinaryOp (Plus, Identifier "x", Const 1),
      Seq (BinaryOp (Minus, Identifier "z", Const 3),
        Seq (BinaryOp (Times, Const 4, Boolean false),
          Seq (BinaryOp (Divide,
            Application (
              Identifier "infinity",
              BinaryOp (Modulus, Const 0, Const 0)
            ), Const 0),
            Seq (
              If (BinaryOp (Gth, Const 6, Const 4),
                Asg (Identifier "i", BinaryOp (Leq, Const 4, Const 3)),
                If (UnaryOp (PostInc, Identifier "n"),
                  Asg (
                    Identifier "the",
                    UnaryOp (PreDec, BinaryOp (
                      Geq, Identifier "square",
                      Identifier "root"
                    ))
                  ), BinaryOp (Equal,
                    UnaryOp (PreInc, UnaryOp (PostDec, Const 16)),
                    BinaryOp (Or, Boolean true, UnaryOp (Not, Boolean false))
                  )
                )
              ),
              BinaryOp (And, Const 3, Identifier "chickens")
            )
          )
        )
      )
    )
  )
]

/% END %/
