/% CODE %/

function eval_deref() {
  i = 0;
  while (~i < 5) {
    printInt(~++i);
  }
  x = 5;
  y = 3;
  z = (~x + ~y) * 3;
  e = z;
  f = i;

  printInt(~~e);
  printInt(~~f);
  ~(if (true) e else f) = ~~e / ~~f;
  printInt(~~e);
  printInt(~~f);

  return ~z;
}

/% TREE %/

Program [
  ("eval_deref", [], Seq [
    Asg (Identifier "i", Const 0);
    While (
      BinaryOp (
        Lth,
        Deref (Identifier "i"),
        Const 5
      ),
      Printint(Deref (UnaryOp (PreInc, Identifier "i")))
    );
    Asg (Identifier "x", Const 5);
    Asg (Identifier "y", Const 3);
    Asg (
      Identifier "z",
      BinaryOp (Times,
        BinaryOp (Plus, 
          Deref (Identifier "x"),
          Deref (Identifier "y")
        ),
        Const 3
      )
    );
    Asg (Identifier "e", Identifier "z");
    Asg (Identifier "f", Identifier "i");
    Printint(Deref (Deref (Identifier "e")));
    Printint(Deref (Deref (Identifier "f")));
    Asg (
      Deref (
        If (Boolean true, Identifier "e", Identifier "f")),
      BinaryOp (
        Divide,
        Deref (Deref (Identifier "e")),
        Deref (Deref (Identifier "f"))
      )
    );
    Printint(Deref (Deref (Identifier "e")));
    Printint(Deref (Deref (Identifier "f")));
    Deref (Identifier "z")
  ])
]

/% RESULT %/

[
  Const 4
]

/% END %/
