/% CODE %/

var i = 0;
while (~i < 5) {
  i = ~i + 1;
  printInt(~i);
}
var x = 5;
var y = 3;
var z = (~x + ~y) * 3;
var e = z;
var f = i;

printInt(~~e);
printInt(~~f);
~(if (true) e else f) = ~~e / ~~f;
printInt(~~e);
printInt(~~f);

return ~z;

/% TREE %/

Program (
  New ("i",
    Const 0,
    Seq [
      While (
        BinaryOp (Lth,
          Deref (Identifier "i"),
          Const 5
        ),
        Seq [
          Asg (
            Identifier "i",
            BinaryOp (Plus,
              Deref (Identifier "i"),
              Const 1
            )
          );
          Printint(Deref (Identifier "i"))
        ]
      );
      New ("x",
        Const 5,
        New ("y",
          Const 3,
          New ("z",
            BinaryOp (Times,
              BinaryOp (Plus,
                Deref (Identifier "x"),
                Deref (Identifier "y")
              ),
              Const 3
            ),
            New ("e",
              Identifier "z",
              New ("f",
                Identifier "i",
                Seq [
                  Printint(Deref (Deref (Identifier "e")));
                  Printint(Deref (Deref (Identifier "f")));
                  Asg (
                    Deref (
                      If (
                        Boolean true,
                        Identifier "e",
                        Identifier "f"
                      )
                    ),
                    BinaryOp (Divide,
                      Deref (Deref (Identifier "e")),
                      Deref (Deref (Identifier "f"))
                    )
                  );
                  Printint(Deref (Deref (Identifier "e")));
                  Printint(Deref (Deref (Identifier "f")));
                  Deref (Identifier "z")
                ]
              )
            )
          )
        )
      )
    ]
  )
)

/% RESULT %/

Value (Const 4)

/% END %/
