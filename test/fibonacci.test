/% CODE %/

function fibonacci() {
  /* Comment me up inside */
  count = 30;
  n = 1;
  a = 0;
  b = 1;
  while (~n++ < ~count) {
    temp = ~a + ~b;
    a = ~b;
    b = ~temp;
    printInt(~n);
    printInt(~temp);
  }
  printInt(~n);
  return ~a + ~b;
}

/% TREE %/

Program [
  ("fibonacci", [], Seq [
    Asg (Identifier "count", Const 30);
    Asg (Identifier "n", Const 1);
    Asg (Identifier "a", Const 0);
    Asg (Identifier "b", Const 1);
    While (
      BinaryOp (Lth, 
        Deref (UnaryOp (PostInc, Identifier "n")),
        Deref (Identifier "count")
      ),
      Seq [
        Asg (
          Identifier "temp",
          BinaryOp (Plus, Deref (Identifier "a"), Deref (Identifier "b"))
        );
        Asg (Identifier "a", Deref (Identifier "b"));
        Asg (Identifier "b", Deref (Identifier "temp"));
        Printint(Deref (Identifier "n"));
        Printint(Deref (Identifier "temp"))
      ]
    );
    Printint(Deref (Identifier "n"));
    (* Return a + b *)
    BinaryOp (Plus,
      Deref (Identifier "a"),
      Deref (Identifier "b")
    )
  ])
]

/% RESULT %/

[
  Const 832040
]


/% END %/
