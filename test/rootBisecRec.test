/% CODE %/

function rootBisec(f, l, r) {
  let mid = (~r - ~l) / 2;
  if (~mid > ~E) { // E being the constant
    if (f(~r) * f(~mid) < 0)
      l = ~mid;
    else
      r = ~mid; 
    bisect(f, l, r);
  } else {
    return ~mid;
  }
}

/% TREE %/

Program (
  Let ("rootBisec",
    Function (["f"; "l"; "r"],
      Let ("mid",
        BinaryOp (Divide,
          BinaryOp (Minus,
            Deref (Identifier "r"),
            Deref (Identifier "l")
          ),
          Const 2
        ),
        If (
          BinaryOp (Gth,
            Deref (Identifier "mid"),
            Deref (Identifier "E")
          ),
          Seq [
            If (
              BinaryOp (Lth,
                BinaryOp (Times,
                  Application (
                    Identifier "f", [
                      Deref (Identifier "r")
                    ]
                  ),
                  Application (
                    Identifier "f", [
                      Deref (Identifier "mid")
                    ]
                  )
                ),
                Const 0
              ),
              Asg (
                Identifier "l",
                Deref (Identifier "mid")
              ),
              Asg (
                Identifier "r",
                Deref (Identifier "mid")
              )
            );
            Application (
              Identifier "bisect", [
                Identifier "f";
                Identifier "l"; 
                Identifier "r"
              ]
            )
          ],
          Deref (Identifier "mid")
        )
      )
    ), Empty
  )
)

/% RESULT %/

Value (Empty)

/% END %/
