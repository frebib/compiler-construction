/% TEST %/

function rootBisec(f, a, b, tolerance, nmax) {
  let n = 1;
  while (~n <= ~nmax) { // limit iterations to prevent infinite loop
    let c = (~a + ~b) / 2; // new midpoint
    if (f(~c) == 0 || (~b - ~a) / 2 < ~tolerance) { // solution found
      printInt(~c);
      return ~c;
    } else {
      n++; // increment step counter
      (if (sign(f(~c)) == sign(f(~a))) a else b) = ~c; // new interval
    }
  }
  return -1;
  // max number of steps exceeded
  // printf("Method failed.") 
}

/% OUTPUT %/

[
  ("rootBisec", ["f"; "a"; "b"; "tolerance"; "nmax"],
    Let ("n", Const 1,
      Seq(
        While ((BinaryOp (Leq, Deref (Identifier "n"), Deref (Identifier "nmax"))),
          (Let ("c", BinaryOp (Divide, BinaryOp (Plus, Deref (Identifier "a"), Deref (Identifier "b")), Const 2),
            If (BinaryOp (Or, BinaryOp (Equal, Application (Identifier "f", Deref (Identifier "c")), Const 0), BinaryOp (Lth, BinaryOp (Divide, BinaryOp (Minus, Deref (Identifier "b"), Deref (Identifier "a")), Const 2), Deref (Identifier "tolerance"))),
              Seq (Printint(Deref (Identifier "c")),
              Deref (Identifier "c")),
            (* else *)
              Seq (UnaryOp (PostInc, Identifier "n"),
              Asg (If (BinaryOp (Equal, Application (Identifier "sign", Application (Identifier "f", Deref (Identifier "c"))), Application (Identifier "sign", Application (Identifier "f", Deref (Identifier "a")))),
                (* if *)
                Identifier "a",
                (* else *)
                Identifier "b"),
                (* = *)
                Deref (Identifier "c"))))))),
        Const (-1)
      )
    )
  )
]

/% END %/
