/% CODE %/

function rootBisec(f, a, b, tolerance) {
  let fa = f(a);
  let fb = f(b);
  if (fa * fb > 0) {
    return -1;
  } else {
    var a = a;
    var b = b;
    var c = 0;
    while (~b - ~a > tolerance) {
      c = (~a + ~b) / 2;
      (if (f(~c) * fa > 0) a else b) = ~c;
    }
    return ~c;
  }
}

rootBisec((fun x -> 2 * x - 2), -347, 123, 1);

/% TREE %/

Program (
  Let ("rootBisec",
    Function (["f"; "a"; "b"; "tolerance"],
      Let ("fa",
        Application (
          Identifier "f", [
            Identifier "a"
          ]),
        Let ("fb",
          Application (
            Identifier "f", [
              Identifier "b"
            ]),
          If (
            BinaryOp (Gth,
              BinaryOp (Times,
                Identifier "fa",
                Identifier "fb"
              ),
              Const 0
            ),
            Const (-1),
            New ("a",
              Identifier "a",
              New ("b",
                Identifier "b",
                New ("c",
                  Const 0,
                  Seq [
                    While (
                      BinaryOp (Gth,
                        BinaryOp (Minus,
                          Deref (Identifier "b"),
                          Deref (Identifier "a")
                        ),
                        Identifier "tolerance"),
                      Seq [
                        Asg (
                          Identifier "c",
                          BinaryOp (Divide,
                            BinaryOp (Plus,
                              Deref (Identifier "a"),
                              Deref (Identifier "b")
                            ),
                            Const 2)
                        );
                        Asg (
                          If (
                            BinaryOp (Gth,
                              BinaryOp (Times,
                                Application (
                                  Identifier "f", [
                                    Deref (Identifier "c")
                                  ]
                                ),
                                Identifier "fa"
                              ), 
                              Const 0
                            ),
                            Identifier "a",
                            Identifier "b"
                          ),
                          Deref (Identifier "c")
                        )
                      ]
                    );
                    Deref (Identifier "c")
                  ]
                )
              )
            )
          )
        )
      )
    ),
    Application (
      Identifier "rootBisec", [
        Function (["x"],
          BinaryOp (Minus,
            BinaryOp (Times,
              Const 2,
              Identifier "x"
            ),
            Const 2
          )
        ); 
        Const (-347);
        Const 123;
        Const 1
      ]
    )
  )
)

/% RESULT %/

Value (Const 0)

/% END %/
